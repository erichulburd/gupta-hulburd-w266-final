import tensorflow as tf
from cnn_gan import PerSampleCNN, mask_questions


def test_mask_questions():
    # batch_size = 2
    # seq_length = 3
    hidden_size = 4

    token_embeddings = tf.constant([[[0.99309865, 0.19019238, 0.990875, 0.72608557],
                                     [0.66810787, 0.3308506, 0.63321125, 0.22736391],
                                     [0.93261767, 0.70101261, 0.02638544, 0.67650275]],
                                    [[0.01551556, 0.23358984, 0.78789598, 0.28140234],
                                     [0.94942975, 0.59315012, 0.43632866, 0.6754952],
                                     [0.6390451, 0.07035357, 0.94329129, 0.30282875]]],
                                   dtype=tf.float32)

    segment_ids = tf.constant([[0, 0, 1], [0, 1, 1]])
    sess = tf.Session()
    with sess.as_default():
        paragraphs = mask_questions(token_embeddings, segment_ids, hidden_size)
        assert paragraphs.eval().tolist() == [
            [[0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0],
             [0.9326176643371582, 0.7010126113891602, 0.026385439559817314, 0.6765027642250061]],
            [[0.0, 0.0, 0.0, 0.0],
             [0.9494297504425049, 0.5931501388549805, 0.436328649520874, 0.6754952073097229],
             [0.6390451192855835, 0.07035356760025024, 0.9432913064956665, 0.30282875895500183]]
        ]
        sess.close()


def test_PerSampleCNN():
    batch_size = 2
    channels_in = 1
    virtual_channels_in = batch_size * channels_in
    seq_length = 3
    hidden_size = 4

    # [2, 3, 4] (batch_size, seq_length, hidden_size)
    # generate examples: np.random.rand(2, 3, 4)
    raw_inpt = tf.constant([[[0.23473523, 0.37063712, 0.77912243, 0.32993048],
                             [0.63721054, 0.08319549, 0.76831797, 0.4266131],
                             [0.38592026, 0.55045797, 0.93172718, 0.82485162]],
                            [[0.92541965, 0.8965153, 0.23710983, 0.86704265],
                             [0.22690775, 0.88550023, 0.94046514, 0.53507364],
                             [0.50180807, 0.4561157, 0.07054137, 0.08757758]]])

    assert raw_inpt.shape == (batch_size, seq_length, hidden_size)
    raw_inpt = tf.reshape(raw_inpt, [batch_size, seq_length, hidden_size, channels_in])

    filter_height = 2
    filter_width = hidden_size
    channels_out = 3

    # [2, 2, 4, 1, 3] (batch_size, filter_height, filter_width, channels_in, channels_out)
    # generate examples: np.random.rand(2, 2, 4, 1, 4)
    raw_filter = tf.constant([[[[[0.14304435, 0.09625073, 0.77567484]],
                                [[0.27217983, 0.56336983, 0.1446083]],
                                [[0.89370349, 0.93078612, 0.17792268]],
                                [[0.55462126, 0.62850174, 0.75265573]]],
                               [[[0.61496975, 0.98380641, 0.91711992]],
                                [[0.68294947, 0.28209551, 0.22325785]],
                                [[0.83509649, 0.70920602, 0.52191262]],
                                [[0.78457606, 0.82472845, 0.34571791]]]],
                              [[[[0.58630382, 0.11827931, 0.25246872]],
                                [[0.94479764, 0.88091642, 0.24138605]],
                                [[0.57670268, 0.96217044, 0.04450517]],
                                [[0.98593368, 0.00568607, 0.40581074]]],
                               [[[0.27201306, 0.46792677, 0.7901913]],
                                [[0.38364412, 0.66863299, 0.34780528]],
                                [[0.27537087, 0.67202928, 0.38662604]],
                                [[0.03404454, 0.79056346, 0.88850767]]]]])

    assert raw_filter.shape == (batch_size, filter_height, filter_width, channels_in, channels_out)

    sess = tf.Session()
    with sess.as_default():
        filtr = tf.transpose(raw_filter, [1, 2, 0, 3, 4])
        assert filtr.shape == (2, 4, batch_size, channels_in, channels_out)
        assert filtr.eval().tolist() == [
            [[[[0.1430443525314331, 0.09625072777271271, 0.7756748199462891]],
              [[0.5863038301467896, 0.11827930808067322, 0.25246870517730713]]],
             [[[0.27217984199523926, 0.5633698105812073, 0.1446083039045334]],
              [[0.9447976350784302, 0.88091641664505, 0.2413860559463501]]],
             [[[0.8937034606933594, 0.9307861328125, 0.17792268097400665]],
              [[0.5767026543617249, 0.962170422077179, 0.04450517147779465]]],
             [[[0.5546212792396545, 0.6285017132759094, 0.7526557445526123]],
              [[0.9859336614608765, 0.005686069838702679, 0.40581074357032776]]]],
            [[[[0.6149697303771973, 0.9838064312934875, 0.9171199202537537]],
              [[0.2720130681991577, 0.4679267704486847, 0.7901912927627563]]],
             [[[0.6829494833946228, 0.2820955216884613, 0.2232578545808792]],
              [[0.38364413380622864, 0.668632984161377, 0.34780529141426086]]],
             [[[0.8350964784622192, 0.7092060446739197, 0.5219126343727112]],
              [[0.27537086606025696, 0.6720292568206787, 0.3866260349750519]]],
             [[[0.7845760583877563, 0.8247284293174744, 0.3457179069519043]],
              [[0.0340445414185524, 0.7905634641647339, 0.8885076642036438]]]]
        ]

        filtr = tf.reshape(filtr, [filter_height, filter_width, virtual_channels_in, channels_out])
        assert filtr.eval().tolist() == [
            [[[0.1430443525314331, 0.09625072777271271, 0.7756748199462891],
              [0.5863038301467896, 0.11827930808067322, 0.25246870517730713]],
             [[0.27217984199523926, 0.5633698105812073, 0.1446083039045334],
              [0.9447976350784302, 0.88091641664505, 0.2413860559463501]],
             [[0.8937034606933594, 0.9307861328125, 0.17792268097400665],
              [0.5767026543617249, 0.962170422077179, 0.04450517147779465]],
             [[0.5546212792396545, 0.6285017132759094, 0.7526557445526123],
              [0.9859336614608765, 0.005686069838702679, 0.40581074357032776]]],
            [[[0.6149697303771973, 0.9838064312934875, 0.9171199202537537],
              [0.2720130681991577, 0.4679267704486847, 0.7901912927627563]],
             [[0.6829494833946228, 0.2820955216884613, 0.2232578545808792],
              [0.38364413380622864, 0.668632984161377, 0.34780529141426086]],
             [[0.8350964784622192, 0.7092060446739197, 0.5219126343727112],
              [0.27537086606025696, 0.6720292568206787, 0.3866260349750519]],
             [[0.7845760583877563, 0.8247284293174744, 0.3457179069519043],
              [0.0340445414185524, 0.7905634641647339, 0.8885076642036438]]]
        ]

        inpt = tf.transpose(raw_inpt, [1, 2, 0, 3])  # shape (H, W, MB, channels_in)
        inpt = tf.reshape(inpt, [1, seq_length, hidden_size, virtual_channels_in])

        out = tf.nn.depthwise_conv2d(inpt, filter=filtr, strides=[1, 1, 1, 1], padding='SAME')

        out = tf.reshape(out, [seq_length, hidden_size, batch_size, channels_in, channels_out])

        out = tf.transpose(out, [2, 0, 1, 3, 4])

        out = tf.reduce_sum(out, axis=3)
        assert out.eval().tolist() == [
            [[[1.9347105026245117, 1.8393170833587646, 1.1376047134399414],
              [2.4387619495391846, 2.7110540866851807, 1.7740782499313354],
              [1.4920871257781982, 1.3828468322753906, 0.9293516278266907],
              [0.9650970101356506, 1.1370856761932373, 1.451940894126892]],
             [[2.128173828125, 2.18698787689209, 1.3807926177978516],
              [3.0755558013916016, 2.9674863815307617, 2.2123682498931885],
              [2.2659552097320557, 2.2273101806640625, 1.3948938846588135],
              [1.362334966659546, 1.463618278503418, 1.6963168382644653]],
             [[1.1137416362762451, 1.315366506576538, 0.8550160527229309],
              [1.4951953887939453, 1.7329158782958984, 1.165554165840149],
              [1.0695099830627441, 1.3456493616104126, 0.7084716558456421],
              [0.35778629779815674, 0.5543758869171143, 0.8419976830482483]]],
            [[[1.9880421161651611, 3.169463634490967, 1.6163923740386963],
              [3.0598227977752686, 2.885563611984253, 2.138761043548584],
              [1.998692274093628, 2.5519163608551025, 1.555851697921753],
              [1.419294834136963, 1.5896739959716797, 1.1984035968780518]],
             [[1.972806692123413, 1.7550524473190308, 0.889386773109436],
              [2.373462438583374, 2.3712453842163086, 1.1902790069580078],
              [1.8915483951568604, 1.7674891948699951, 0.8932029008865356],
              [1.1097214221954346, 0.6741582155227661, 0.452798455953598]],
             [[0.806699275970459, 0.8813130259513855, 0.17005541920661926],
              [0.8521760702133179, 0.5295240879058838, 0.27547019720077515],
              [0.3845759332180023, 0.200354665517807, 0.1360802948474884],
              [0.12410176545381546, 0.08549211174249649, 0.038949497044086456]]]
        ]
        assert out.shape == (batch_size, seq_length, hidden_size, channels_out)

        ps_cnn = PerSampleCNN(filters=raw_filter, inpt=raw_inpt)

        assert out.eval().tolist() == ps_cnn.apply().eval().tolist()

        sess.close()


if __name__ == '__main__':
    test_PerSampleCNN()
    test_mask_questions()
